/*
 * File: app/controller/Navigation.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Demo.controller.Navigation', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'contentPanel',
            selector: '#contentPanel'
        }
    ],

    emptyWorldClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                title : {
                    text : 'Empty map'
                }
            },
            series : [{
                mapData: Highcharts.maps.world,
                name: 'World map'
            }]

        });
    },

    popDensityClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                title: {
                    text: "Test 'joinBy' between mapData (from URL) and data (from Store)"
                },
                mapNavigation: {
                    enabled: true,
                    buttonOptions: {
                        verticalAlign: 'bottom'
                    }
                },
                colorAxis: {
                    min: 1,
                    max: 1000,
                    type: 'logarithmic'
                }
            },
            series : [{

                // Following fields are to construct map series data
                // field
                dataNameField: 'name',
                dataValueField: 'value',
                store: Ext.StoreMgr.get('PopDensity'),

                animation: true,
                mapData: Highcharts.maps.world,
                joinBy: 'code',
                name: 'Population density',
                borderColor: 'black',
                borderWidth: 0.2,
                states: {
                    hover: {
                        borderWidth: 1
                    }
                },
                tooltip: {
                    valueSuffix: '/km²'
                }
            }]
        });
    },

    popDenMapDataStoreClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                title: {
                    text: "Test 'joinBy' between mapData (from Store) and data (from Store)"
                },
                subtitle: {
                    text: "Use joinBy as an array with code1 on data store and code2 on mapData store"
                },
                mapNavigation: {
                    enabled: true,
                    buttonOptions: {
                        verticalAlign: 'bottom'
                    }
                },
                colorAxis: {
                    min: 1,
                    max: 1000,
                    type: 'logarithmic'
                }
            },
            series : [{

                // Following fields are to construct map series data
                // field
                dataNameField: 'name',
                dataValueField: 'value',
                store: Ext.StoreMgr.get('PopDensity1'),

                mapDataStore: Ext.StoreMgr.get('MapData2'),
                mapDataPathField: 'path',
                joinBy: [ 'code2', 'code1' ],

                name: 'Population density',
                borderColor: 'black',
                borderWidth: 0.2,
                states: {
                    hover: {
                        borderWidth: 1
                    }
                },
                tooltip: {
                    valueSuffix: '/km²'
                }
            }]
        });
    },

    multiseriesClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            id: 'highmaps',
            chartConfig: {
                chart : {
                    plotBorderWidth : 1,
                    plotBackgroundColor: '#f4e2ba'
                },
                title: {
                    text: "Multiple Series (Map, Map Line and Map Point)"
                },
                subtitle: {
                    text: "Each series uses it's own store"
                },
                xAxis: {
                    minPadding: -0.01
                },
                yAxis: {
                    minPadding: -0.01,
                    maxPadding: 0.01
                },
                plotOptions: {
                    series: {
                        tooltip: {
                            headerFormat: '',
                            pointFormat: '{point.name}'
                        }
                    }
                },

                legend: {
                    align: 'left',
                    backgroundColor: 'white',
                    floating: true,
                    layout: 'vertical',
                    verticalAlign: 'bottom',
                    x: 50,
                    y: -50
                }
                    // series: series
            },

            series: [{
                name: "Areas",
                dataNameField: 'name',
                dataColorField: 'color',
                dataPathField: 'path',
                store: Ext.StoreMgr.get('MeuseAreas'),
                showInLegend: false
            }, {
                name: "Basin",
                dataNameField: 'name',
                dataPathField: 'path',
                color: "rgba(200,150,0,0.4)",
                borderColor: "#c86400",
                borderWidth: 3,
                store: Ext.StoreMgr.get('MeuseBasin')
            }, {
                name: "Meuse",
                dataNameField: 'name',
                dataPathField: 'path',
                type: "mapline",
                color: "#0096c8",
                lineWidth: 3,
                store: Ext.StoreMgr.get('Meuse')
            }, {
                type: "mapline",
                name: "Tributaries",
                dataPathField: 'path',
                color: "#0096c8",
                store: Ext.StoreMgr.get('Tributaries'),
                tooltip: {
                    pointFormat: "Meuse Tributary"
                }
            }, {
                type: "mapline",
                name: "Borders",
                dataPathField: 'path',
                color: "silver",
                store: Ext.StoreMgr.get('Borders'),
                tooltip: {
                    pointFormat: "Border"
                }
            }, {
                type: "mappoint",
                name: "Cities",
                dataNameField: 'name',
                marker: {
                    fillColor: "white",
                    lineColor: "black",
                    lineWidth: 2,
                    radius: 3
                },
                store: Ext.StoreMgr.get('Cities')
            }]

        });
    },

    popupMenuClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                title: {
                    text: "Test popup menu & dialog box to update map value"
                },
                subtitle: {
                    text: "Click on a region and a popup menu should appear. " +
                        "You can update the map value dynamically with the 'Set Value' menu"
                },
                mapNavigation: {
                    enabled: true,
                    buttonOptions: {
                        verticalAlign: 'bottom'
                    }
                },
                colorAxis: {
                    min: 1,
                    max: 1000,
                    type: 'logarithmic'
                },
                plotOptions: {
                    series: {
                        cursor: 'pointer',
                        point: {
                            events: {
                                click: function(evt) {

                                    // Click a menu based on the clicked map region
                                    var popup = Ext.create("Ext.menu.Menu", {
                                        title: this.name + " (" + this.code + ")",
                                        items: [{
                                            text: 'Set Value',
                                            scope: this,
                                            handler: function() {
                                                // Popup a modal dialog box to set the value
                                                Ext.create('Demo.view.SetValue', {
                                                    pointObj: this
                                                }).show();
                                            }
                                        }, {
                                            text: 'Cancel',
                                            handler: function() {
                                                popup.close();
                                            }
                                        }]
                                    });

                                    popup.showAt(evt.x + 5, evt.y + 5);
                                }
                            }
                        }
                    }
                }
            },
            listeners: {
                mapClick: function(datapoint, evt) {
                }
            },
            series : [{

                // Following fields are to construct map series data
                // field
                dataNameField: 'name',
                dataValueField: 'value',
                store: Ext.StoreMgr.get('PopDensity'),

                mapData: Highcharts.maps.world,
                joinBy: 'code',
                name: 'Population density',
                borderColor: 'black',
                borderWidth: 0.2,
                states: {
                    hover: {
                        borderWidth: 1
                    }
                },
                tooltip: {
                    valueSuffix: '/km²'
                }
            }]
        });
    },

    updateValueClick: function(button, e, eOpts) {
        var win = button.up('window');
        var value = win.down('numberfield').getValue();
        var pointObj = win.pointObj;

        // Highcharts API to update the point value in chart
        pointObj.update(value);

        win.close();


    },

    bubbleSeriesClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                chart: {
                    borderWidth : 1
                },

                title: {
                    text: 'World population 2010 by country'
                },

                legend: {
                    enabled: false
                },

                mapNavigation: {
                    enabled: true,
                    buttonOptions: {
                        verticalAlign: 'bottom'
                    }
                }
            },

            series : [{

                name: 'Countries',
                mapData: Highcharts.maps.world,
                color: '#E0E0E0',
                enableMouseTracking: false

            }, {

                // Following fields are to construct map series data
                // field
                dataValueField: 'z',
                store: Ext.StoreMgr.get('WorldPopulation'),

                allowPointSelect: true,
                cursor: 'pointer',
                type: 'mapbubble',
                colorByPoint: true,
                mapData: Highcharts.maps.world,
                name: 'Population 2010',
                joinBy: 'code',
                minSize: 4,
                maxSize: '12%',
                tooltip: {
                    pointFormat: '{point.code}: {point.z} thousands'
                }
            }]
        });
    },

    chartMapClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        // Years of the population history
        categories = [ 1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,
                      1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,
                      1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,
                      1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,
                      2004,2005,2006,2007,2008,2009,2010,2011,2012
                     ];

        // Add lower case codes to the data set for inclusion in the tooltip.pointFormat
        Ext.each(Highcharts.maps.world, function (country) {
            country.flag = country.code.toLowerCase();
            country.id = country.code; // for Chart.get()
        });

        // Wrap point.select to get to the total selected points
        (!Demo.wrapSelect) && Highcharts.wrap(Highcharts.Point.prototype, 'select', function (proceed) {

            proceed.apply(this, Array.prototype.slice.call(arguments, 1));

            // Only do it once. Otherwise, we accumulate the call
            Demo.wrapSelect = true;

            var mapChart = panel.down('highmaps').chart;
            var countryChart = panel.down('#chartContainer').down('highcharts');

            var points = mapChart.getSelectedPoints();

            if (points.length) {
                if (points.length === 1) {
                    $('#info #flag').attr('class', 'flag ' + points[0].flag);
                    Ext.select('#info h2').update(points[0].name);
                } else {
                    $('#info #flag').attr('class', 'flag');
                    Ext.select('#info h2').update('Comparing countries');
                }
                Ext.select('#info .subheader')
                .update('<h4>Historical population</h4><small>Shift + Click on map to compare countries</small>');
            }

            countryChart = countryChart && countryChart.chart;

            var renderSeries = function(chart) {

                if (!chart) {
                    var series = [];
                    Ext.each(points, function(point, index) {
                           series.push({
                                name: point.name,
                                data: Demo.countries[point.code3].population,
                                type: points.length > 1 ? 'line' : 'area'
                           });
                    });
                    return series;
                } else {
                    Ext.each(points, function(point, index) {
                        // Update
                        if (chart.series[index]) {
                            chart.series[index].update({
                                name: point.name,
                                data: Demo.countries[point.code3].population,
                                type: points.length > 1 ? 'line' : 'area'
                            }, false);
                        } else {
                            // console.log("Add series");
                            chart.addSeries({
                                name: point.name,
                                data: Demo.countries[point.code3].population,
                                type: points.length > 1 ? 'line' : 'area'
                            }, false);
                        }
                    });

                    while (chart.series.length > points.length) {
                        chart.series[chart.series.length - 1].remove(false);
                    }
                    chart.redraw();
                }
            };

            if (!countryChart) {
                // console.log("Create country chart");
                var hc = panel.down('#chartContainer').add({
                    xtype: 'highcharts',
                    // We don't use store - so don't wait
                    // for any store load
                    initAnimAfterLoad: false,
                    chartConfig: {
                        chart: {
                            height: 250,
                            spacingLeft: 10
                        } ,
                        credits: {
                            enabled: false
                        },
                        title: {
                            text: null
                        },
                        subtitle: {
                            text: null
                        },
                        'exporting': {
                            enabled: false
                        },
                        xAxis: {
                            tickPixelInterval: 50,
                            crosshair: true
                        },
                        yAxis: {
                            title: null,
                            opposite: true
                        },
                        tooltip: {
                            shared: true
                        },
                        plotOptions: {
                            series: {
                                animation: {
                                    duration: 500
                                },
                                marker: {
                                    enabled: false
                                },
                                threshold: 0,
                                pointStart: categories[0]
                            }
                        },
                        series: renderSeries()
                    } // chartConfig
                });
            } else if (points.length) {
                renderSeries(countryChart);
            }

            if (!points.length) {
                $('#info #flag').attr('class', '');
                Ext.select('#info h2').update('');
                Ext.select('#info .subheader').update('');
                if (countryChart) {
                    countryChart = panel.down('#chartContainer').down('highcharts').destroy();
                }
            }

            return true;
        });


        // Create a container with hbox layout with two items
        panel.add({
            xtype: 'container',
            layout: 'hbox',
            height: '100%',
            items: [{
                flex: 2,
                minWidth: 450,
                minHeight: 600,
                height: 100,
                xtype: 'highmaps',
                id: 'highmaps',
                chartConfig: {
                    chart: {

                    },
                    title : {
                        text : 'Highmaps & Highcharts interact with each other'
                    },

                    subtitle: {
                        text: 'Taken from Highcharts example'
                    },

                    mapNavigation: {
                        enabled: true,
                        buttonOptions: {
                            verticalAlign: 'bottom'
                        }
                    },

                    'exporting': {
                        enabled: false
                    },

                    colorAxis: {
                        type: 'logarithmic',
                        endOnTick: false
                    },

                    tooltip: {
                        footerFormat: '<span style=font-size: 10px>(Click for details)</span>'
                    },

                    // Workaround for allowPointSelect: somehow when repeatedly click on different
                    // map region, the map region doesn't revert to unselect color properly.
                    // Force it to switch back original color
                    plotOptions: {
                        series: {
                            point: {
                                events: {
                                    unselect: function() {
                                       this.graphic.attr({ fill: this.color });
                                    }
                                }
                            }
                        }
                    }
                },
                series : [{
                    store: Ext.StoreMgr.get('PopulationHistory'),
                    dataValueField: 'value',
                    dataNameField: 'name',

                    mapData: Highcharts.maps.world,
                    joinBy: 'code3',
                    name: 'Current population',
                    allowPointSelect: true,
                    cursor: 'pointer',
                    states: {
                        select: {
                            color: '#BADA55',
                            borderColor: 'black',
                            dashStyle: 'shortdot'
                        }
                    }
                }]

            }, {
                flex: 1,
                minWidth: 200,
                height: '100%',
                id: 'info',
                bodyStyle: {
                    float: 'left',
                    paddingLeft: '20px',
                    margin: '100px 0 0 0',
                    borderLeft: '1px solid silver'
                },
                items: [{
                    xtype: 'container',
                    itemId: 'chartHeader',
                    html: '<span class="f32"><span id="flag"></span></span><h2 id="cname"></h2><div class="subheader"></div>'
                }, {
                    xtype: 'container',
                    itemId: 'chartContainer'
                }]
            }]

        });

        // Get the countries population history data before we
        // pre-select a country
        Ext.Ajax.request({
            url: './data/population_history.json',
            success: function(response) {
                var result = Ext.decode(response.responseText);
                if (!result) {
                    return;
                }

                Demo.countries = result;

                 panel.down('highmaps').on('mapReady', function(highmaps) {
                     highmaps.chart.get('US').select();
                 });
            }
        });
    },

    usCountiesClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                        chart : {
                    borderWidth : 1,
                    marginRight: 50 // for the legend
                },

                title : {
                    text : 'US Counties unemployment rates, July 2013'
                },

                subtitle: {
                    text: 'One map series with 2 stores (mapData and data), one mapline series with a store and a mapline series without store'
                },
                legend: {
                    title: {
                        text: 'Unemployment<br>rate',
                        style: {
                            color: (Highcharts.theme && Highcharts.theme.textColor) || 'black'
                        }
                    },
                    layout: 'vertical',
                    align: 'right',
                    floating: true,
                    valueDecimals: 0,
                    valueSuffix: '%',
                    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || 'rgba(255, 255, 255, 0.85)',
                    symbolRadius: 0,
                    symbolHeight: 14
                },

                mapNavigation: {
                    enabled: true
                },

                colorAxis: {
                    dataClasses: [{
                        from: 0,
                        to: 2,
                        color: "#F1EEF6"
                    }, {
                        from: 2,
                        to: 4,
                        color: "#D4B9DA"
                    }, {
                        from: 4,
                        to: 6,
                        color: "#C994C7"
                    }, {
                        from: 6,
                        to: 8,
                        color: "#DF65B0"
                    }, {
                        from: 8,
                        to: 10,
                        color: "#DD1C77"
                    }, {
                        from: 10,
                        color: "#980043"
                    }]
                }
            },
            series : [{
                // US Counties Map with counties region value

                // data only with name and value fields
                store: Ext.StoreMgr.get('USCountiesData'),
                dataNameField: 'name',
                dataValueField: 'value',

                mapDataPathField: 'path',
                mapDataStore : Ext.StoreMgr.get('USCountiesMap'),
                joinBy: 'name',
                name: 'Unemployment rate',
                borderWidth: 0.5,
                states: {
                    hover: {
                        color: '#bada55'
                    }
                },
                tooltip: {
                    valueSuffix: '%'
                },
                point: {
                    events: {
                        click: function () {
                            console.log(this.name, [this._midX, this._midY]);
                        }
                    }
                }
            }, {
                // Borders between counties
                type: "mapline",
                name: 'State borders',
                store: Ext.StoreMgr.get('USCountiesBorders'),
                lineWidth: 1,
                showInLegend: false,
                enableMouseTracking: false
            }, {
                // Test the setting without store
                type: 'mapline',
                name: "Separator",
                data: [{
                    path: "M834,1602L834,1794L959,1907M3,1366L601,1366L834,1602L1133,1602L1317,1790L1317,1907"
                }],
                color: 'black',
                showInLegend: false,
                enableMouseTracking: false
            }]

        });
    },

    drilldownClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                chart : {
                    events: {
                        drilldown: function (e) {
                            this.setTitle(null, { text: e.point.name });
                            // console.log(e);
                            e.seriesOptions.name = e.point.name;
                        },
                        drillup: function (e) {
                            this.setTitle(null, { text: 'US Mainland' });
                        }
                    }
                },

                title : {
                    text : 'Highcharts Map Drilldown'
                },

                subtitle: {
                    text: 'US Mainland',
                    floating: true,

                    align: 'right',
                    y: 50,
                    style: {
                        fontSize: '16px'
                    }
                },

                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'middle'
                },

                colorAxis: {
                    min: 0,
                    max: 100,
                    minColor: '#E6E7E8',
                    maxColor: '#005645'
                },

                mapNavigation: {
                    enabled: true,
                    buttonOptions: {
                        verticalAlign: 'bottom'
                    }
                },

                plotOptions: {
                    map: {
                        states: {
                            hover: {
                                color: '#EEDD66'
                            }
                        }
                    }
                }
            },
            series : [{
                store: Ext.StoreMgr.get('USStates'),
                getData: function(record) {
                    return {
                        path: record.data.path,
                        name: record.data.name,
                        drilldown: record.data.drilldown,
                        value: record.data.value
                    };
                },
                name: 'US Mainland',
                dataLabels: {
                    enabled: true,
                    formatter: function () {
                        return this.point.drilldown.substr(3, 2);
                    },
                    format: null
                }
            }],

            drilldown: {
                store: Ext.StoreMgr.get('Drilldown'),

                activeDataLabelStyle: {
                    color: 'white'
                },
                drillUpButton: {
                    relativeTo: 'spacingBox',
                    position: {
                        x: 0,
                        y: 60
                    }
                }
            }
        });

    },

    heatmapClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highcharts',
            updateAnim: false,
            chartConfig: {
                chart: {
                    type: 'heatmap',
                    inverted: true
                },

                title: {
                    text: 'Highcharts heat map study',
                    align: 'left'
                },

                subtitle: {
                    text: 'Temperature variation by day and hour through April 2013',
                    align: 'left'
                },

                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 50,
                    min: Date.UTC(2013, 3, 1),
                    max: Date.UTC(2013, 3, 30)
                },

                yAxis: {
                    title: {
                        text: null
                    },
                    labels: {
                        format: '{value}:00'
                    },
                    minPadding: 0,
                    maxPadding: 0,
                    startOnTick: false,
                    endOnTick: false,
                    tickPositions: [0, 6, 12, 18, 24],
                    tickWidth: 1,
                    min: 0,
                    max: 23
                },

                colorAxis: {
                    stops: [
                        [0, '#3060cf'],
                        [0.5, '#fffbbc'],
                        [0.9, '#c4463a']
                    ],
                    min: -5
                }
            },

                store: Ext.StoreMgr.get('Heatmap'),

            series: [{
                xField: 'Date',
                yField: 'Time',
                dataIndex: 'Temperature',

                borderWidth: 0,
                colsize: 24 * 3600000, // one day
                tooltip: {
                    headerFormat: 'Temperature<br/>',
                    pointFormat: '{point.x:%e %b, %Y} {point.y}:00: <b>{point.value} ℃</b>'
                }
            }]
        });

        Ext.StoreMgr.get('Heatmap').load();
    },

    onToolClick: function(tool, e, eOpts) {
        var msg = "Highcharts: " + Highcharts.version + ", " +
            "ExtJs: " + Ext.versions.extjs.version + ", Extension: " +
            Chart.ux.Highcharts.version;

        Ext.Msg.alert('Info', msg);
    },

    popupGraphClick: function(item, e, eOpts) {
        if (this.selected_item === item.getItemId()) {
            return;
        }

        this.selectMenuItem(item);

        var panel = this.getContentPanel();
        panel.removeAll();

        // Load the votes data first before we populate series.data
        var store = Ext.StoreMgr.get('USMap');
        store.load({
            callback: function(records) {
                Ext.each(records, function(rec) {

                });
            }
        });

        var pointClick = function(evt) {
            var pointObj = this;

            var win = Ext.create('Ext.window.Window', {
                modal: true,
                title: pointObj.name,
                layout: 'fit',
                            width: 370,
                            height: 240,
                items:[{
                    xtype: 'highcharts',
                    initAnimAfterLoad: false, // No store, don't wait for load
                    chartConfig: {
                        chart: {
                            type: 'pie'
                        },
                        title: {
                            text: null
                        }
                    },
                    series: [{
                        name: 'Votes',
                        data: [{
                            name: 'Obama',
                            color: '#0200D0',
                            y: pointObj.obama
                        }, {
                            name: 'McCain',
                            color: '#C40401',
                            y: pointObj.mccain
                        }],
                        dataLabels: {
                            format: '<b>{point.name}</b> {point.percentage:.1f}%'
                        }
                    }]
                }]
            }).show();
        };

        panel.add({
            xtype: 'highmaps',
            updateAnim: false,
            chartConfig: {
                chart: {
                    borderWidth : 1
                },

                title : {
                    text : 'US presidential election 2008 results'
                },
                subtitle : {
                    text : 'Click on the state for local election result'
                },

                credits: {
                    text : 'Source: Wikipedia',
                    href: 'http://en.wikipedia.org/wiki/United_States_presidential_election,_2008#Election_results'
                },

                legend: {
                    align: 'right',
                    verticalAlign: 'top',
                    x: -100,
                    y: 70,
                    floating: true,
                    layout: 'vertical',
                    valueDecimals: 0,
                    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || 'rgba(255, 255, 255, 0.85)'
                },

                mapNavigation: {
                    enabled: true,
                    enableButtons: false
                },

                colorAxis: {

                    dataClasses: [{
                        from: -100,
                        to: 0,
                        color: '#C40401',
                        name: 'McCain'
                    }, {
                        from: 0,
                        to: 100,
                        color: '#0200D0',
                        name: 'Obama'
                    }]

                }
            },
            series : [{
                store: Ext.StoreMgr.get('Vote'),
                getData: function(record) {
                    return {
                        value: record.data.percent,
                        code: record.data.code,
                        obama: record.data.obama,
                        mccain: record.data.mccain,
                        name: record.data.name
                    };
                },

                mapDataStore: Ext.StoreMgr.get('USMap'),
                getMapData: function(record) {
                // console.log(record);
                    return {
                        path: record.data.path,
                        code: record.data.code,
                        middleX: record.data.middleX,
                        middleY: record.data.middleY
                    };
                },

                joinBy: 'code',

                dataLabels: {
                    enabled: true,
                    color: 'white',
                    format: '{point.code}',
                    style: {
                        fontWeight: 'bold',
                        textShadow: '0 1px 2px black',
                        textTransform: 'uppercase'
                    }
                },
                name: 'Democrats margin',
                point: {
                    events: {
                        click: pointClick
                    }
                },
                tooltip: {
                    ySuffix: ' %'
                },
                cursor: 'pointer'
            }]
        });
    },

    selectMenuItem: function(item) {
        this.selected_item = item.getItemId();

        this.getContentPanel().setTitle(item.text);
    },

    init: function(application) {
        this.control({
            "#empty_world": {
                click: this.emptyWorldClick
            },
            "#pop_density": {
                click: this.popDensityClick
            },
            "#pop_density_1": {
                click: this.popDenMapDataStoreClick
            },
            "#mult_series": {
                click: this.multiseriesClick
            },
            "#popup_menu": {
                click: this.popupMenuClick
            },
            "#update_value": {
                click: this.updateValueClick
            },
            "#bubble_series": {
                click: this.bubbleSeriesClick
            },
            "#chart_map": {
                click: this.chartMapClick
            },
            "#us_counties": {
                click: this.usCountiesClick
            },
            "#drilldown": {
                click: this.drilldownClick
            },
            "#heatmap": {
                click: this.heatmapClick
            },
            "#mytool": {
                click: this.onToolClick
            },
            "#popup_graph": {
                click: this.popupGraphClick
            }
        });
    }

});
