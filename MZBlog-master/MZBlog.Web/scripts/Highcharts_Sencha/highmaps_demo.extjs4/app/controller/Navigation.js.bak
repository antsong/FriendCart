/*
 * File: app/controller/Navigation.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Demo.controller.Navigation', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'contentPanel',
            selector: '#contentPanel'
        }
    ],

    emptyWorldClick: function(menu, item, e, eOpts) {
        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                title : {
                    text : 'Empty map'
                }
            },
            series : [{
                mapData: Highcharts.maps.world,
                name: 'World map'
            }]

        });
    },

    onContentPanelShow: function(component, eOpts) {
        component.setTitle("ExtJs " + Ext.versions.extjs.version);
    },

    popDensityClick: function(item, e, eOpts) {
        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                title: {
                    text: "Test 'joinBy' between mapData (from URL) and data (from Store)"
                },
                mapNavigation: {
                    enabled: true,
                    buttonOptions: {
                        verticalAlign: 'bottom'
                    }
                },
                colorAxis: {
                    min: 1,
                    max: 1000,
                    type: 'logarithmic'
                }
            },
            series : [{

                // Following fields are to construct map series data
                // field
                dataNameField: 'name',
                dataValueField: 'value',
                store: Ext.StoreMgr.get('PopDensity'),

                mapData: Highcharts.maps.world,
                joinBy: 'code',
                name: 'Population density',
                borderColor: 'black',
                borderWidth: 0.2,
                states: {
                    hover: {
                        borderWidth: 1
                    }
                },
                tooltip: {
                    valueSuffix: '/km²'
                }
            }]
        });
    },

    popDenMapDataStoreClick: function(item, e, eOpts) {
        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                title: {
                    text: "Test 'joinBy' between mapData (from Store) and data (from Store)"
                },
                subtitle: {
                    text: "Use joinBy as an array with code1 on data store and code2 on mapData store"
                },
                mapNavigation: {
                    enabled: true,
                    buttonOptions: {
                        verticalAlign: 'bottom'
                    }
                },
                colorAxis: {
                    min: 1,
                    max: 1000,
                    type: 'logarithmic'
                }
            },
            series : [{

                // Following fields are to construct map series data
                // field
                dataNameField: 'name',
                dataValueField: 'value',
                store: Ext.StoreMgr.get('PopDensity1'),

                mapDataStore: Ext.StoreMgr.get('MapData2'),
                mapDataPathField: 'path',
                joinBy: [ 'code2', 'code1' ],

                name: 'Population density',
                borderColor: 'black',
                borderWidth: 0.2,
                states: {
                    hover: {
                        borderWidth: 1
                    }
                },
                tooltip: {
                    valueSuffix: '/km²'
                }
            }]
        });
    },

    multiseriesClick: function(item, e, eOpts) {
        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            id: 'highmaps',
            chartConfig: {
                chart : {
                    plotBorderWidth : 1,
                    plotBackgroundColor: '#f4e2ba'
                },
                title: {
                    text: "Multiple Series (Map, Map Line and Map Point)"
                },
                subtitle: {
                    text: "Each series uses it's own store"
                },
                xAxis: {
                    minPadding: -0.01
                },
                yAxis: {
                    minPadding: -0.01,
                    maxPadding: 0.01
                },
                plotOptions: {
                    series: {
                        tooltip: {
                            headerFormat: '',
                            pointFormat: '{point.name}'
                        }
                    }
                },

                legend: {
                    align: 'left',
                    backgroundColor: 'white',
                    floating: true,
                    layout: 'vertical',
                    verticalAlign: 'bottom',
                    x: 50,
                    y: -50
                }
                    // series: series
            },

            series: [{
                name: "Areas",
                store: Ext.StoreMgr.get('MeuseAreas'),
                showInLegend: false
            }, {
                name: "Basin",
                color: "rgba(200,150,0,0.4)",
                borderColor: "#c86400",
                borderWidth: 3,
                store: Ext.StoreMgr.get('MeuseBasin')
            }, {
                name: "Meuse",
                type: "mapline",
                color: "#0096c8",
                lineWidth: 3,
                store: Ext.StoreMgr.get('Meuse')
            }, {
                type: "mapline",
                name: "Tributaries",
                color: "#0096c8",
                store: Ext.StoreMgr.get('Tributaries'),
                tooltip: {
                    pointFormat: "Meuse Tributary"
                }
            }, {
                type: "mapline",
                name: "Borders",
                color: "silver",
                store: Ext.StoreMgr.get('Borders'),
                tooltip: {
                    pointFormat: "Border"
                }
            }, {
                type: "mappoint",
                name: "Cities",
                marker: {
                    fillColor: "white",
                    lineColor: "black",
                    lineWidth: 2,
                    radius: 3
                },
                store: Ext.StoreMgr.get('Cities')
            }]

        });
    },

    popupMenuClick: function(item, e, eOpts) {
        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                title: {
                    text: "Test popup menu & dialog box to update map value"
                },
                subtitle: {
                    text: "Click on a region and a popup menu should appear. " +
                        "You can update the map value dynamically with the 'Set Value' menu"
                },
                mapNavigation: {
                    enabled: true,
                    buttonOptions: {
                        verticalAlign: 'bottom'
                    }
                },
                colorAxis: {
                    min: 1,
                    max: 1000,
                    type: 'logarithmic'
                },
                plotOptions: {
                    series: {
                        cursor: 'pointer',
                        point: {
                            events: {
                                click: function(evt) {

                                    // Click a menu based on the clicked map region
                                    var popup = Ext.create("Ext.menu.Menu", {
                                        title: this.name + " (" + this.code + ")",
                                        items: [{
                                            text: 'Set Value',
                                            scope: this,
                                            handler: function() {
                                                // Popup a modal dialog box to set the value
                                                Ext.create('Demo.view.SetValue', {
                                                    pointObj: this
                                                }).show();
                                            }
                                        }, {
                                            text: 'Cancel',
                                            handler: function() {
                                                popup.close();
                                            }
                                        }]
                                    });

                                    popup.showAt(evt.x + 5, evt.y + 5);
                                }
                            }
                        }
                    }
                }
            },
            listeners: {
                mapClick: function(datapoint, evt) {
                }
            },
            series : [{

                // Following fields are to construct map series data
                // field
                dataNameField: 'name',
                dataValueField: 'value',
                store: Ext.StoreMgr.get('PopDensity'),

                mapData: Highcharts.maps.world,
                joinBy: 'code',
                name: 'Population density',
                borderColor: 'black',
                borderWidth: 0.2,
                states: {
                    hover: {
                        borderWidth: 1
                    }
                },
                tooltip: {
                    valueSuffix: '/km²'
                }
            }]
        });
    },

    updateValueClick: function(button, e, eOpts) {
        var win = button.up('window');
        var value = win.down('numberfield').getValue();
        var pointObj = win.pointObj;

        // Highcharts API to update the point value in chart
        pointObj.update(value);

        win.close();


    },

    bubbleSeriesClick: function(item, e, eOpts) {
        var panel = this.getContentPanel();
        panel.removeAll();

        panel.add({
            xtype: 'highmaps',
            chartConfig: {
                chart: {
                    borderWidth : 1
                },

                title: {
                    text: 'World population 2010 by country'
                },

                legend: {
                    enabled: false
                },

                mapNavigation: {
                    enabled: true,
                    buttonOptions: {
                        verticalAlign: 'bottom'
                    }
                }
            },

            series : [{

                name: 'Countries',
                mapData: Highcharts.maps.world,
                color: '#E0E0E0',
                enableMouseTracking: false

            }, {

                // Following fields are to construct map series data
                // field
                dataValueField: 'z',
                store: Ext.StoreMgr.get('WorldPopulation'),

                allowPointSelect: true,
                cursor: 'pointer',
                type: 'mapbubble',
                colorByPoint: true,
                mapData: Highcharts.maps.world,
                name: 'Population 2010',
                joinBy: 'code',
                minSize: 4,
                maxSize: '12%',
                tooltip: {
                    pointFormat: '{point.code}: {point.z} thousands'
                }
            }]
        });
    },

    chartMapClick: function(item, e, eOpts) {
        var panel = country.getContentPanel();
        panel.removeAll();

        // Years of the population history
        categories = [ 1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,
                       1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,
                       1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,
                       1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,
                       2004,2005,2006,2007,2008,2009,2010,2011,2012
                      ];

        // Add lower case codes to the data set for inclusion in the tooltip.pointFormat
        Ext.each(Highcharts.maps.world, function (country) {
            country.flag = country.code.toLowerCase();
            country.id = country.code; // for Chart.get()
        });

        // Create a container with hbox layout with two items
        panel.add({
            xtype: 'container' ,
            layout: 'hbox',
            height: '100%',
            items: [{
                flex: 2,
                minWidth: 450,
                minHeight: 600,
                height: 100,
                xtype: 'highmaps',
                id: 'highmaps',
                chartConfig: {
                    title : {
                        text : 'Highmaps & Highcharts interact with each other'
                    },

                    subtitle: {
                        text: 'Taken from Highcharts example'
                    },

                    mapNavigation: {
                        enabled: true,
                        buttonOptions: {
                            verticalAlign: 'bottom'
                        }
                    },

                    colorAxis: {
                        type: 'logarithmic',
                        endOnTick: false
                    },

                    tooltip: {
                        footerFormat: '<span style=font-size: 10px>(Click for details)</span>'
                    }
                },
                series : [{

                    store: Ext.StoreMgr.get('PopulationHistory'),

                    //
                    getData: function(record) {
                        return {
                            name: record.data.name,
                            year: record.data.year,
                            code3: record.data.code3,
                            value: record.data.value
                        };
                    },

                    mapData: Highcharts.maps.world,
                    joinBy: 'code3',
                    name: 'Current population',
                    allowPointSelect: true,
                    cursor: 'pointer',
                    states: {
                        select: {
                            color: '#BADA55',
                            borderColor: 'black',
                            dashStyle: 'shortdot'
                        }
                    }
                }]

            }, {
                flex: 1,
                minWidth: 200,
                minHeight: 600,
                height: 100,
                xtype: 'highcharts',
                chartConfig: {
                    height: 250,
                    spacingLeft: 0
                },
                credits: {
                    enabled: false
                },
                title: {
                    text: null
                },
                subtitle: {
                    text: null
                },
                xAxis: {
                    tickPixelInterval: 50,
                    crosshair: true
                },
                yAxis: {
                    title: null,
                    opposite: true
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    series: {
                        animation: {
                            duration: 500
                        },
                        marker: {
                            enabled: false
                        },
                        threshold: 0,
                        pointStart: categories[0]
                    }
                }

            }]

        });
    },

    init: function(application) {
        this.control({
            "#empty_world": {
                click: this.emptyWorldClick
            },
            "#contentPanel": {
                show: this.onContentPanelShow
            },
            "#pop_density": {
                click: this.popDensityClick
            },
            "#pop_density_1": {
                click: this.popDenMapDataStoreClick
            },
            "#mult_series": {
                click: this.multiseriesClick
            },
            "#popup_menu": {
                click: this.popupMenuClick
            },
            "#update_value": {
                click: this.updateValueClick
            },
            "#bubble_series": {
                click: this.bubbleSeriesClick
            },
            "#chart_map": {
                click: this.chartMapClick
            }
        });
    }

});
